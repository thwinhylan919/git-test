#!/bin/sh

# Export environment variable OBDX_IS_GRUNT to tell the sass compiler to run grunt specific build.
export OBDX_IS_GRUNT=true

# Export environment variable to ignoring linting tasks errors (preBuildChecks and eslint/eslint-jsdoc), for running a successful DEV build.
# N.B. This flag should never be set to true in production builds.
export OBDX_IGNORE_LINTER_ERRORS=false

# Export environment variable to switch SVN blame functionality for linter (preBuildChecks and eslint/eslint-jsdoc) errors.
# This variable is also reused to check if there are any files in version control generated by UI Workbench.
# This option, if set to `enable` requires the directory to be SVN version controlled and command-line SVN should exist on system.
# Set to `disable` to disable blame information.
export OBDX_LINTER_BLAME=disable

# Signal NodeJS that build is running in production mode as opposed to development mode.
export NODE_ENV=production

# Timer started
start=`date +%s`

# Function to convert seconds into minutes and seconds format for displaying total time taken by build.
convertsecs() {
 ((m=(${1}%3600)/60))
 ((s=${1}%60))
 printf "%d minutes and %d seconds\n" $m $s
}

# Function to check the last command status code and exit the program if non-zero error code is encountered.
checkStatus() {
    if [ $1 -ne 0 ]; then
    echo "failure!";
    node --max_old_space_size=5120 $(which grunt) cleanToolkitFiles
    exit 1
    fi
}

# Build task begins.
echo running build task

# Delete the grunt and build directory before starting.
rm -rf ../dist

# Download required libraries for build
node download-lib.js
checkStatus $?

# Display analytics results
node build-analytics.js --authorWithMostErrors

# Run pre build checks on code. Remove --verbose if detailed output is not required.
# Run the eslint linter and eslint jsdoc linter
node preBuildChecks.js --verbose && node eslint.js
checkStatus $?

# Run the grunt command with node heap size as 5 GB to improve performance.
# Component task modifies the directory structure to make list of components streamlined.
# Integrity generator task computes file hashes for the resources and seeds security.js.
# List components task generates a JSON to handle list for Dashboard Management.
node --max_old_space_size=5120 $(which grunt) && node component.js && node integrity-generator.js && node listComponents.js
checkStatus $?

# Clean the UI Workbench generated files after success of previous step
node --max_old_space_size=5120 $(which grunt) cleanToolkitFiles

# Run resource bundle task.
node resource-bundle.js &
P4=$!

# Generate JSDocs.
#npm run jsdoc-nix &
P5=$!
wait $P4 $P5
checkStatus $?
end=`date +%s`

if [ "$OBDX_IGNORE_LINTER_ERRORS" = true ] ; then
    echo 'Build performed with prebuild checks disabled. Code quality may be sub-par.' > ../dist/build.warning
fi

echo $BUILD_NUMBER > ../dist/buildnum

# Build end.
printf "\n\nTotal time taken by ./build.sh: %s %s %s %s %s %s\n\n" $(convertsecs $((end-start)))